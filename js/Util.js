// Generated by CoffeeScript 1.4.0
(function() {

  define(['Facebook', 'handlebars', 'underscore', 'jquery', 'fb-sdk', 'bootstrap'], function(Facebook, Handelbars, _) {
    var Util;
    Util = (function() {

      function Util() {}

      Util.prototype.getTwoBestLikeCategories = function(likes) {
        var category, like, likesCategories, _i, _len;
        likesCategories = {};
        likes = likes.data;
        for (_i = 0, _len = likes.length; _i < _len; _i++) {
          like = likes[_i];
          category = like.category;
          this.increment(likesCategories, category);
        }
        return this.getTwoBest(likesCategories);
      };

      Util.prototype.getTwoBestTaggers = function(photos, userId) {
        var from, id, name, photo, taggers, _i, _len;
        photos = photos.data;
        taggers = {};
        for (_i = 0, _len = photos.length; _i < _len; _i++) {
          photo = photos[_i];
          from = photo.from;
          id = from.id;
          if (id === userId) {
            continue;
          }
          name = from.name;
          this.increment(taggers, name);
        }
        return this.getTwoBest(taggers);
      };

      Util.prototype.getStatusesStats = function(statuses) {
        var likes, likesLength, nbLikes, nbStatuses, result, status, statusesArr, _i, _len;
        statusesArr = {};
        nbLikes = 0;
        nbStatuses = 0;
        for (_i = 0, _len = statuses.length; _i < _len; _i++) {
          status = statuses[_i];
          nbStatuses++;
          likes = status.likes;
          if (likes != null) {
            likesLength = likes.data.length;
            statusesArr[status.message] = likesLength;
            nbLikes += likesLength;
          }
        }
        return result = {
          twoBestStatuses: this.getTwoBest(statusesArr),
          average: parseFloat(nbLikes / nbStatuses).toPrecision(3)
        };
      };

      Util.prototype.getTwoBest = function(arr) {
        var first, firstValue, result, second, secondValue, single, value;
        first = second = '';
        firstValue = secondValue = 0;
        for (single in arr) {
          value = arr[single];
          if (value > firstValue) {
            secondValue = firstValue;
            second = first;
            firstValue = value;
            first = single;
          } else if (value > secondValue) {
            secondValue = value;
            second = single;
          }
        }
        result = {
          first: {
            name: first,
            value: firstValue
          },
          second: {
            name: second,
            value: secondValue
          }
        };
        return result;
      };

      Util.prototype.increment = function(arr, key) {
        arr[key] = arr[key] != null ? arr[key] + 1 : 1;
        return arr;
      };

      Util.prototype.getAllStatuses = function(deferred, offset, result) {
        var self;
        if (offset == null) {
          offset = 0;
        }
        if (result == null) {
          result = [];
        }
        self = this;
        return Facebook.api('me/statuses', 'get', {
          offset: offset,
          limit: 1000
        }).done(function(res) {
          var statuses;
          statuses = res.data;
          if ((statuses != null) && statuses.length !== 0) {
            result = result.concat(statuses);
            if (statuses.length === 100) {
              offset += 100;
              return self.getAllStatuses(deferred, offset, result);
            } else {
              return deferred.resolve(result);
            }
          } else {
            return deferred.resolve(result);
          }
        });
      };

      return Util;

    })();
    return new Util;
  });

}).call(this);
